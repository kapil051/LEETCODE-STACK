Given an array of integers temperatures represents the daily temperatures, return an array answer such that answer[i] is the number of days you have to wait after the ith day to get a warmer temperature. If there is no future day for which this is possible, keep answer[i] == 0 instead.

 

Example 1:

Input: temperatures = [73,74,75,71,69,72,76,73]
Output: [1,1,4,2,1,1,0,0]
Example 2:

Input: temperatures = [30,40,50,60]
Output: [1,1,1,0]
Example 3:

Input: temperatures = [30,60,90]
Output: [1,1,0]
 

Constraints:

1 <= temperatures.length <= 105
30 <= temperatures[i] <= 100

//*****************************************************STACK APPROACH(O(N))***********************************************************

class Solution {
public:
    vector<int> dailyTemperatures(vector<int> &nums) {
        
              stack<int> s1;
        
           vector<int> ans(nums.size(),0);
        
         for(int i=nums.size()-1;i>=0;i--){
             
             if(s1.size()==0){
                ans[i]=0;
                 s1.push(i);
             }
             
             
             else{

             //pop the element unit you can't get the bigger element from the current element
             
               while(s1.size()&&nums[s1.top()]<=nums[i]) s1.pop();
                 
                 //IF SIZE OF STACK BECOME 0 PLACE 0 AND PUSH CURRENT ELEMENT TO THE STACK
                 
                   if(s1.size()==0){
                    ans[i]=0;
                    s1.push(i);
                   }
                 
                 else{
                     ans[i]=s1.top()-i;
                     s1.push(i);
                 }
                 
             
             }
    
         }
        
        return ans;
    }
};
