Given a circular integer array nums (i.e., the next element of nums[nums.length - 1] is nums[0]), return the next greater number for every element in nums.

The next greater number of a number x is the first greater number to its traversing-order next in the array, which means you could search circularly to find its next greater number. If it doesn't exist, return -1 for this number.

 

Example 1:

Input: nums = [1,2,1]
Output: [2,-1,2]
Explanation: The first 1's next greater number is 2; 
The number 2 can't find next greater number. 
The second 1's next greater number needs to search circularly, which is also 2.
Example 2:

Input: nums = [1,2,3,4,3]
Output: [2,3,4,-1,4]
 

Constraints:

1 <= nums.length <= 104
-109 <= nums[i] <= 109

************************************************************USING STACK(O(N))*************************************************************

class Solution {
public:
    vector<int> nextGreaterElements(vector<int>& nums) {
        
             stack<int> s1;
        
         vector<int> ans(nums.size());
        
        for(int i=nums.size()-1;i>=0;i--) s1.push(nums[i]);
        
         for(int i=nums.size()-1;i>=0;i--){
             
             //REMOVE THE ELENTS FROM THE STACK UNTILL THE ELEMENTS IN STACK IS LESS THAN OR EQUAL TO THE CURRENT ELEMENT
             
             while(s1.size()&&s1.top()<=nums[i]) s1.pop();
             
             //IF NOW STACK BECOME EMPTY NO ELEMENT IS GREATER THAN CURRENT ELEMENT PUSH CURRENT ELEMENT 
             
             if(s1.empty()){
                 ans[i]=-1;
                 s1.push(nums[i]);
             }
            
            //NOW TOP OF THE STACK IS NEXT GREATER ELEMENT AND PUSH CURRENT ELEMENT TO THE STACK
            
             else{
                   ans[i]=s1.top();
                   s1.push(nums[i]);
             }
             
             
         }
        
        return ans;
    }
};
